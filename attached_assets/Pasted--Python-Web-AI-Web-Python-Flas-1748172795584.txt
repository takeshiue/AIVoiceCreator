あなたはプロの Python Web アプリケーション開発者です。これから説明する仕様に基づいて、"AI インタビュー ジェネレーター" という Web アプリケーションを Python と Flask を使って開発してください。

## 1. アプリケーション概要

### 1.1. アプリケーション名
AI インタビュー ジェネレーター

### 1.2. 目的
ユーザーが指定する簡単な会話の構成案を元に、AI (Google Gemini 1.5 Pro) がインタビュー形式の対談トークスクリプトを生成します。生成されたスクリプトはユーザーが編集でき、最終的な内容を AI の TTS (Google Gemini 1.5 Pro TTS) を使って音声に変換します。音声はブラウザで再生可能で、MP3 ファイルとしてダウンロードもできます。

### 1.3. 主要技術スタック
- **バックエンド**: Python, Flask
- **テキスト生成 AI**: Google Gemini 1.5 Pro (モデル: `gemini-1.5-pro-latest`)
- **音声合成 AI (TTS)**: Google Gemini 1.5 Pro TTS (Google AI Studio のドキュメント https://ai.google.dev/gemini-api/docs/speech-generation?hl=ja を参照し、`GenerateSpeechRequest` や `generateContent` API の speech generation 機能を使用してください。具体的には `models/text-to-speech` やドキュメントに記載されている適切なモデル名を利用してください。)
- **フロントエンド**: HTML, CSS, JavaScript (モダンでおしゃれ、かつ直感的に使いやすいインターフェースを目指してください。CSSフレームワークの利用も可。例: Tailwind CSS や Bootstrap)
- **APIキー管理**: Google API キーは環境変数 `GOOGLE_API_KEY` から読み込むように実装してください。

## 2. 機能要件

### 2.1. トークスクリプト生成
1.  **入力 UI**:
    * ユーザーが会話の構成案を複数行で入力できるテキストエリアを設置。
    * 入力例:
        ```
        田中さんと佐藤さんの挨拶から始まる
        佐藤さんが、AIの話を始める
        田中さんが、AIの進化について質問する
        佐藤さんが、具体的な事例を挙げて説明する
        最後に田中さんがまとめる
        ```
2.  **処理**:
    * 「トーク生成」ボタンを設置。クリックされると、入力された構成案をバックエンドに送信。
    * バックエンドでは、受け取った構成案を元に、Gemini 1.5 Pro を使って自然なインタビュー形式のトークスクリプトを生成します。
    * スクリプトの形式は以下のように、話者 (Speaker1, Speaker2) とセリフを明確に区別してください。
        ```
        Speaker1: こんにちは、田中です。
        Speaker2: こんにちは、佐藤です。本日はよろしくお願いいたします。
        Speaker1: 佐藤さん、今日はどんなお話を聞かせていただけるのでしょうか？
        Speaker2: はい、今日は最新のAI技術の動向と、私たちの生活への影響についてお話ししたいと思います。
        ...
        ```
3.  **出力 UI**:
    * 生成されたトークスクリプトを、編集可能なテキストエリアに表示します。

### 2.2. トークスクリプト編集
1.  ユーザーは、AI が生成したトークスクリプトを自由に編集できるテキストエリアを提供します。
2.  編集された内容は、後続の音声生成機能に利用されます。

### 2.3. 音声合成 (TTS)
1.  **入力 UI**:
    * **話者選択**: Gemini 1.5 Pro TTS で利用可能な音声モデルを選択できるドロップダウンメニューを設置。
        (例: `aura-asteria-en`, `aura-luna-en` など。可能であれば日本語対応のモデルを優先し、ドキュメント https://ai.google.dev/gemini-api/docs/speech-generation?hl=ja を参照してリストアップしてください。適切なデフォルト値を設定してください。)
    * **話し方指定**: 話し方の速度を調整できるUI（例: スライダーまたは選択肢「ゆっくり(0.8x)」「普通(1.0x)」「早く(1.2x)」など）。APIが対応するパラメータ (例: `speakingRate`) を使用してください。
2.  **処理**:
    * 「音声生成」ボタンを設置。クリックされると、現在のトークスクリプト、選択された話者、話し方の設定をバックエンドに送信。
    * バックエンドでは、Gemini 1.5 Pro TTS を使って音声データ (MP3形式を推奨) を生成します。
    * スクリプト全体を1つの音声ファイルとして生成してください。
3.  **出力 UI**:
    * **ブラウザ再生**: 生成された音声をブラウザ上で再生できる HTML5 オーディオプレイヤー (`<audio controls>`) を表示します。
    * **ダウンロード**: 生成された音声ファイル (MP3) を `interview_audio.mp3` のような名前でダウンロードできるボタンを提供します。

## 3. ユーザーインターフェース (UI) / ユーザーエクスペリエンス (UX)

-   **全体デザイン**: モダンで、クリーンなデザイン。「おしゃれで使いやすい」インターフェースを最優先してください。
-   **レスポンシブデザイン**: PC、タブレット、スマートフォンなど、様々なデバイスで快適に利用できるようにしてください。
-   **レイアウト提案**:
    1.  **ヘッダー**: アプリケーションタイトル "AI インタビュー ジェネレーター"
    2.  **メインコンテンツエリア (3カラムまたはステップ形式も検討)**:
        * **カラム1/ステップ1: 構成案入力**
            * 説明文 (例: "インタビューの構成案を自由に入力してください。")
            * 構成案入力用テキストエリア (`id="constitution_input"`)
            * 「トーク生成」ボタン (`id="generate_script_button"`)
        * **カラム2/ステップ2: スクリプト編集と音声設定**
            * 説明文 (例: "生成されたスクリプトです。自由に編集し、音声設定を選択してください。")
            * スクリプト編集用テキストエリア (`id="script_display_edit_area"`)
            * 話者選択ドロップダウン (`id="voice_select"`)
            * 話し方速度調整コントロール (`id="speaking_rate_control"`)
            * 「音声生成」ボタン (`id="generate_audio_button"`)
        * **カラム3/ステップ3: 音声確認**
            * 説明文 (例: "生成された音声です。")
            * オーディオプレイヤー (`id="audio_player"`)
            * 「音声をダウンロード」ボタン (`id="download_audio_button"`) (初期は非表示/無効、音声生成後に表示/有効化)
-   **ユーザーフィードバック**:
    * AIによる処理中 (トーク生成、音声生成) は、ローディングインジケーター (スピナーなど) を表示し、ユーザーに処理中であることを明確に伝えてください。
    * エラー発生時は、画面上部に分かりやすいエラーメッセージを表示してください。

## 4. バックエンド実装 (Python/Flask)

### 4.1. API エンドポイント (例)
-   `POST /api/generate_script`
    -   リクエスト (JSON): `{ "constitution": "ユーザー入力の構成案文字列" }`
    -   レスポンス (JSON): `{ "script": "生成されたトークスクリプト文字列" }` or `{ "error": "エラーメッセージ" }`
-   `POST /api/generate_audio`
    -   リクエスト (JSON): `{ "script": "編集後のトークスクリプト文字列", "voice": "選択された話者ID文字列", "rate": "選択された話し方速度数値" }`
    -   レスポンス (JSON): `{ "audio_file_name": "生成された音声ファイル名 (例: 'timestamp_audio.mp3')", "message": "音声生成成功" }` or `{ "error": "エラーメッセージ" }`
    -   生成された音声ファイルはサーバーの一時的な静的フォルダ (例: `/static/audio/`) に保存し、クライアント側はそのファイルパスを参照して再生・ダウンロードします。
-   `GET /static/audio/<filename>`
    -   Flask の静的ファイル配信機能を利用して音声ファイルを配信します。

### 4.2. Google Gemini API 連携
-   `google-generativeai` Pythonライブラリを使用してください。
-   **テキスト生成 (Gemini 1.5 Pro)**:
    -   ユーザーの構成案を元に、効果的なプロンプトを設計してください。
    -   プロンプト例:
        ```
        あなたはプロの放送作家です。以下の構成案に基づいて、自然で魅力的なインタビューのトークスクリプトを Speaker1 と Speaker2 の対話形式で作成してください。
        ---
        構成案:
        {user_constitution_input}
        ---
        トークスクリプト:
        ```
-   **音声合成 (Gemini 1.5 Pro TTS)**:
    -   `GenerateSpeechRequest` または `generateContent` APIの speech generation 機能を正確に使用してください。
    -   APIリファレンス (https://ai.google.dev/gemini-api/docs/speech-generation?hl=ja) に従い、テキスト入力、音声モデル (`model` パラメータに `models/text-to-speech` や適切な話者モデル名を指定)、音声エンコーディング (`audio_encoding` パラメータに `MP3` 等) を設定してください。
    -   APIから返された音声データ (Base64エンコードされている場合はデコード) をMP3ファイルとしてサーバーの一時ディレクトリに保存します。ファイル名にはタイムスタンプなどを含めて一意になるようにしてください。

### 4.3. エラーハンドリング
-   Gemini API との通信エラー (認証失敗、API制限、タイムアウト等) を適切に処理し、フロントエンドにエラー情報を返してください。
-   ユーザー入力のバリデーション (例: 構成案が空でないか) も適宜行ってください。

## 5. Replit 環境設定
-   **`requirements.txt`**: 以下のライブラリを記述してください。
    ```
    Flask
    google-generativeai
    python-dotenv
    ```
-   **`.env` ファイル**: ルートディレクトリに `.env` ファイルを作成し、`GOOGLE_API_KEY='YOUR_API_KEY_HERE'` の形式でAPIキーを設定するように、README.md やコード内のコメントでユーザーに指示してください。 (注: `.env` ファイルは `.gitignore` に追加し、バージョン管理に含めないでください。)
-   **起動スクリプト (`main.py`)**: Flask アプリケーションを Replit で実行できるように設定してください (`app.run(host='0.0.0.0', port=8080)`)。
-   **静的ファイル**: 生成した音声ファイルを一時的に保存し、配信するための `static/audio` ディレクトリを作成・利用することを想定してください。

## 6. 開発ステップの提案
1.  Flaskの基本的なWebサーバーをセットアップ。
2.  フロントエンドのHTML/CSSで基本的なUIレイアウトを作成。
3.  「トーク生成」機能: 構成案入力 → Gemini Pro API連携 → スクリプト表示。
4.  「音声生成」機能: スクリプトと設定入力 → Gemini Pro TTS API連携 → 音声ファイル保存。
5.  音声再生機能とダウンロード機能の実装。
6.  UIの洗練、エラーハンドリング、ローディング表示などのUX向上。

上記プロンプトを元に、高品質な "AI インタビュー ジェネレーター" を開発してください。不明な点や、より良い実装案があれば、積極的に提案してください。